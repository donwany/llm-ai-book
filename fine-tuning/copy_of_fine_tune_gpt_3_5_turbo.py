# -*- coding: utf-8 -*-
"""Copy of fine_tune_gpt_3_5_turbo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hB_faYhSQsXrR_KMd-3C29c8Y4k3R0sC
"""

from collections import defaultdict
import numpy as np
import tiktoken
import os
import openai
import json
import random
import pandas as pd
from datasets import load_dataset
!pip install openai datasets


ds = load_dataset("argilla/llama-2-banking-fine-tune", split="train")


pd.DataFrame(ds).head()

len(ds)

ds[0]

ds_formatted = [
    {"messages": [
        {"role": "system", "content": "You are a customer service representative from Bank of America. Please reply customer requests using polite and respectful language."},
        {'role': 'user', 'content': x["request"]},
        {'role': 'assistant', 'content': x["response-1"]}]} for x in ds
]

ds_formatted[0]

random.shuffle(ds_formatted)

ds_train = ds_formatted[:80]
ds_val = ds_formatted[80:]


with open('train.jsonl', 'w') as f:
    for line in ds_train:
        json.dump(line, f)
        f.write('\n')

with open('val.jsonl', 'w') as f:
    for line in ds_val:
        json.dump(line, f)
        f.write('\n')

!ls - lart

!head - n 2 train.jsonl

!head - n 2 val.jsonl

"""# Upload data"""


openai.api_key = '...'

!openai tools fine_tunes.prepare_data - f train.jsonl

# Upload training data
train = openai.File.create(
    file=open("train.jsonl", "rb"),
    purpose='fine-tune'
)
train

"""### Checking data format"""

!pip install tiktoken

# We start by importing the required packages


# Next, we specify the data path and open the JSONL file

data_path = "train.jsonl"

# Load dataset
with open(data_path) as f:
    dataset = [json.loads(line) for line in f]

# We can inspect the data quickly by checking the number of examples and the first item

# Initial dataset stats
print("Num examples:", len(dataset))
print("First example:")
for message in dataset[0]["messages"]:
    print(message)

# Now that we have a sense of the data, we need to go through all the different examples and check to make sure the formatting is correct and matches the Chat completions message structure

# Format error checks
format_errors = defaultdict(int)

for ex in dataset:
    if not isinstance(ex, dict):
        format_errors["data_type"] += 1
        continue

    messages = ex.get("messages", None)
    if not messages:
        format_errors["missing_messages_list"] += 1
        continue

    for message in messages:
        if "role" not in message or "content" not in message:
            format_errors["message_missing_key"] += 1

        if any(k not in ("role", "content", "name") for k in message):
            format_errors["message_unrecognized_key"] += 1

        if message.get("role", None) not in ("system", "user", "assistant"):
            format_errors["unrecognized_role"] += 1

        content = message.get("content", None)
        if not content or not isinstance(content, str):
            format_errors["missing_content"] += 1

    if not any(message.get("role", None) == "assistant" for message in messages):
        format_errors["example_missing_assistant_message"] += 1

if format_errors:
    print("Found errors:")
    for k, v in format_errors.items():
        print(f"{k}: {v}")
else:
    print("No errors found")

# Beyond the structure of the message, we also need to ensure that the length does not exceed the 4096 token limit.

# Token counting functions
encoding = tiktoken.get_encoding("cl100k_base")

# not exact!
# simplified from https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb


def num_tokens_from_messages(messages, tokens_per_message=3, tokens_per_name=1):
    num_tokens = 0
    for message in messages:
        num_tokens += tokens_per_message
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
            if key == "name":
                num_tokens += tokens_per_name
    num_tokens += 3
    return num_tokens


def num_assistant_tokens_from_messages(messages):
    num_tokens = 0
    for message in messages:
        if message["role"] == "assistant":
            num_tokens += len(encoding.encode(message["content"]))
    return num_tokens


def print_distribution(values, name):
    print(f"\n#### Distribution of {name}:")
    print(f"min / max: {min(values)}, {max(values)}")
    print(f"mean / median: {np.mean(values)}, {np.median(values)}")
    print(f"p5 / p95: {np.quantile(values, 0.1)}, {np.quantile(values, 0.9)}")

# Last, we can look at the results of the different formatting operations before proceeding with creating a fine-tuning job:


# Warnings and tokens counts
n_missing_system = 0
n_missing_user = 0
n_messages = []
convo_lens = []
assistant_message_lens = []

for ex in dataset:
    messages = ex["messages"]
    if not any(message["role"] == "system" for message in messages):
        n_missing_system += 1
    if not any(message["role"] == "user" for message in messages):
        n_missing_user += 1
    n_messages.append(len(messages))
    convo_lens.append(num_tokens_from_messages(messages))
    assistant_message_lens.append(num_assistant_tokens_from_messages(messages))

print("Num examples missing system message:", n_missing_system)
print("Num examples missing user message:", n_missing_user)
print_distribution(n_messages, "num_messages_per_example")
print_distribution(convo_lens, "num_total_tokens_per_example")
print_distribution(assistant_message_lens, "num_assistant_tokens_per_example")
n_too_long = sum(l > 4096 for l in convo_lens)
print(f"\n{n_too_long} examples may be over the 4096 token limit, they will be truncated during fine-tuning")

# Pricing and default n_epochs estimate
MAX_TOKENS_PER_EXAMPLE = 4096

MIN_TARGET_EXAMPLES = 100
MAX_TARGET_EXAMPLES = 25000
TARGET_EPOCHS = 3
MIN_EPOCHS = 1
MAX_EPOCHS = 25

n_epochs = TARGET_EPOCHS
n_train_examples = len(dataset)
if n_train_examples * TARGET_EPOCHS < MIN_TARGET_EXAMPLES:
    n_epochs = min(MAX_EPOCHS, MIN_TARGET_EXAMPLES // n_train_examples)
elif n_train_examples * TARGET_EPOCHS > MAX_TARGET_EXAMPLES:
    n_epochs = max(MIN_EPOCHS, MAX_TARGET_EXAMPLES // n_train_examples)

n_billing_tokens_in_dataset = sum(
    min(MAX_TOKENS_PER_EXAMPLE, length) for length in convo_lens)
print(
    f"Dataset has ~{n_billing_tokens_in_dataset} tokens that will be charged for during training")
print(f"By default, you'll train for {n_epochs} epochs on this dataset")
print(
    f"By default, you'll be charged for ~{n_epochs * n_billing_tokens_in_dataset} tokens")
print("See pricing page to estimate total costs")

50400*0.0080

train_id = train['id']

# Upload validation data
val = openai.File.create(
    file=open("val.jsonl", "rb"),
    purpose='fine-tune'
)
val

val_id = val['id']

"""# Fine-tuning"""

# Create a fine-tuned model
response = openai.FineTuningJob.create(
    training_file=train_id,
    validation_file=val_id,
    model="gpt-3.5-turbo"
)

response

job_id = response['id']

# Retrieve the state of a fine-tune
response = openai.FineTuningJob.retrieve(job_id)
response

# Retrieve the state of a fine-tune
response = openai.FineTuningJob.retrieve(job_id)
response

# List up to 10 events from a fine-tuning job
response = openai.FineTuningJob.list_events(id=job_id, limit=10)
response

events = response["data"]
events.reverse()

for event in events:
    print(event["message"])

response = openai.FineTuningJob.retrieve(job_id)
response

model_id = response["fine_tuned_model"]

"""# Inference"""

test_messages = [
    {"role": "system", "content": "You are a customer service representative from Bank of America. Please reply customer requests using polite and respectful language."},
    {"role": "user", "content": "My card is stolen!"}
]

completion = openai.ChatCompletion.create(
    model=model_id,
    messages=test_messages
)

print(completion.choices[0].message)


"""### Inference without fine-tuning"""

completion1 = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=test_messages
)

print(completion1.choices[0].message)

"""### Delete fine-tune model"""

# Delete a fine-tuned model (must be an owner of the org the model was created in)
openai.Model.delete(model_id)

"""### Fine-Tuning Cost

Model	        Training	           Input usage	      Output usage
babbage-002	  $0.0004 / 1K tokens	$0.0016 / 1K tokens	$0.0016 / 1K tokens
davinci-002	  $0.0060 / 1K tokens	$0.0120 / 1K tokens	$0.0120 / 1K tokens
GPT-3.5 Turbo	$0.0080 / 1K tokens	$0.0120 / 1K tokens	$0.0160 / 1K tokens
"""

0.0080*50400*3


"""### Checking training data"""

training_data = [{
    "prompt": "Where is the billing ->",
    "completion": " You find the billing in the left-hand side menu."
}, {
    "prompt": "How do I upgrade my account ->",
    "completion": " Visit you user settings in the left-hand side menu, then click 'upgrade account' button at the top."
}]

file_name = "training_data.jsonl"

with open(file_name, "w") as output_file:
    for entry in training_data:
        json.dump(entry, output_file)
        output_file.write("")

!openai tools fine_tunes.prepare_data - f train.jsonl

"""### Upload data"""

upload_response = openai.File.create(
    file=open(file_name, "rb"),
    purpose='fine-tune'
)

file_id = upload_response.id

upload_response
